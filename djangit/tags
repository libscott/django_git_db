!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Branch	gitly.py	/^class Branch(object):$/;"	c
Commit	gitly.py	/^class Commit(object):$/;"	c
Count	selectors.py	/^class Count(object):$/;"	c
Database	base.py	/^    Database = type("Database", (), {$/;"	v	class:DatabaseWrapper
DatabaseWrapper	base.py	/^class DatabaseWrapper(BaseDatabaseWrapper):$/;"	c
DeleteRunner	runners.py	/^class DeleteRunner(GitQueryRunner):$/;"	c
EMPTY	gitly.py	/^EMPTY = object()$/;"	v
GitConnection	base.py	/^class GitConnection(object):$/;"	c
GitConnectionFeatures	base.py	/^class GitConnectionFeatures(object):$/;"	c
GitConnectionOpts	base.py	/^class GitConnectionOpts(object):$/;"	c
GitCursor	cursor.py	/^class GitCursor(object):$/;"	c
GitDatabaseCreation	creation.py	/^class GitDatabaseCreation(BaseDatabaseCreation):$/;"	c
GitDeleteCompiler	compilers.py	/^class GitDeleteCompiler(GitQueryCompiler, runners.DeleteRunner):$/;"	c
GitInsertCompiler	compilers.py	/^class GitInsertCompiler(GitQueryCompiler, runners.InsertRunner):$/;"	c
GitIntrospection	introspection.py	/^class GitIntrospection(BaseDatabaseIntrospection):$/;"	c
GitQueryCompiler	compilers.py	/^class GitQueryCompiler(SQLCompiler):$/;"	c
GitQueryRunner	runners.py	/^class GitQueryRunner(object):$/;"	c
GitSchemaEditor	base.py	/^class GitSchemaEditor(object):$/;"	c
GitUpdateCompiler	compilers.py	/^class GitUpdateCompiler(GitQueryCompiler, runners.UpdateRunner):$/;"	c
GitValidation	base.py	/^class GitValidation(object):$/;"	c
InsertRunner	runners.py	/^class InsertRunner(GitQueryRunner):$/;"	c
Lookup	selectors.py	/^class Lookup(object):$/;"	c
MyDatabaseErrorWrapper	base.py	/^class MyDatabaseErrorWrapper(DatabaseErrorWrapper):$/;"	c
SQLCompiler	compilers.py	/^class SQLCompiler(GitQueryCompiler, runners.SelectRunner):$/;"	c
SQLDeleteCompiler	compilers.py	/^SQLDeleteCompiler = GitDeleteCompiler$/;"	v
SQLInsertCompiler	compilers.py	/^SQLInsertCompiler = GitInsertCompiler$/;"	v
SQLUpdateCompiler	compilers.py	/^SQLUpdateCompiler = GitUpdateCompiler$/;"	v
SelectRunner	runners.py	/^class SelectRunner(GitQueryRunner):$/;"	c
Tree	gitly.py	/^class Tree(object):$/;"	c
UpdateRunner	runners.py	/^class UpdateRunner(GitQueryRunner):$/;"	c
_ERROR	gitly.py	/^    _ERROR = object()$/;"	v	class:Tree
__call__	selectors.py	/^    def __call__(self, _):$/;"	m	class:Count	file:
__call__	selectors.py	/^    def __call__(self, obj):$/;"	m	class:Lookup	file:
__contains__	gitly.py	/^    def __contains__(self, path):$/;"	m	class:Branch	file:
__contains__	gitly.py	/^    def __contains__(self, path):$/;"	m	class:Tree	file:
__delitem__	gitly.py	/^    def __delitem__(self, path):$/;"	m	class:Branch	file:
__eq__	gitly.py	/^    def __eq__(self, other):$/;"	m	class:Tree	file:
__exit__	base.py	/^    def __exit__(self, exc_type, *args):$/;"	m	class:MyDatabaseErrorWrapper	file:
__getitem__	gitly.py	/^    __getitem__ = get$/;"	v	class:Tree
__getitem__	gitly.py	/^    def __getitem__(self, name):$/;"	m	class:Branch	file:
__init__	base.py	/^    def __init__(self, *args):$/;"	m	class:GitConnection
__init__	base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:DatabaseWrapper
__init__	base.py	/^    def __init__(self, cursor, connection):$/;"	m	class:GitSchemaEditor
__init__	compilers.py	/^    def __init__(self, query, connection, using):$/;"	m	class:GitQueryCompiler
__init__	cursor.py	/^    def __init__(self, branch):$/;"	m	class:GitCursor
__init__	gitly.py	/^    def __init__(self, repo, branch_name):$/;"	m	class:Branch
__init__	gitly.py	/^    def __init__(self, repo, pygit2_commit):$/;"	m	class:Commit
__init__	gitly.py	/^    def __init__(self, repo, pygit2_tree=None):$/;"	m	class:Tree
__init__	selectors.py	/^    def __init__(self, col):$/;"	m	class:Count
__init__	selectors.py	/^    def __init__(self, col):$/;"	m	class:Lookup
__iter__	gitly.py	/^    def __iter__(self):$/;"	m	class:Tree	file:
__len__	gitly.py	/^    def __len__(self):$/;"	m	class:Tree	file:
__setitem__	gitly.py	/^    def __setitem__(self, path, value):$/;"	m	class:Branch	file:
_create_test_db	creation.py	/^    def _create_test_db(self, verbosity, autoclobber, keepdb=False):$/;"	m	class:GitDatabaseCreation
_destroy_test_db	creation.py	/^    _destroy_test_db = NotImplemented$/;"	v	class:GitDatabaseCreation
_digest	creation.py	/^    _digest = NotImplemented$/;"	v	class:GitDatabaseCreation
_get	gitly.py	/^    def _get(self, path):$/;"	m	class:Tree
_rollback	base.py	/^    def _rollback(self):$/;"	m	class:DatabaseWrapper
_set_autocommit	base.py	/^    def _set_autocommit(self, val):$/;"	m	class:DatabaseWrapper
alice	gitly.py	/^    alice = pygit2.Signature('Alice Author', 'alice@authors.tld')$/;"	v	class:Branch
all_the_joins	runners.py	/^    def all_the_joins(self, branch):$/;"	m	class:SelectRunner
alter_field	base.py	/^    def alter_field(self, from_model, from_field, to_field):$/;"	m	class:GitSchemaEditor
alter_unique_together	base.py	/^    def alter_unique_together(self, content_type, thingies, field_sets):$/;"	m	class:GitSchemaEditor
apply_ordering	runners.py	/^    def apply_ordering(self, objs):$/;"	m	class:SelectRunner
as_row	runners.py	/^    def as_row(self, obj):$/;"	m	class:GitQueryRunner
autocommits_when_autocommit_is_off	base.py	/^    autocommits_when_autocommit_is_off = False$/;"	v	class:GitConnectionFeatures
branch	gitly.py	/^    def branch(self, name, force=False):$/;"	m	class:Commit
bulk_batch_size	base.py	/^    def bulk_batch_size(self, fields, objs):$/;"	m	class:GitConnectionOpts
can_combine_inserts_with_and_without_auto_increment_pk	base.py	/^    can_combine_inserts_with_and_without_auto_increment_pk = True$/;"	v	class:GitConnectionFeatures
can_rollback_ddl	base.py	/^    can_rollback_ddl = True$/;"	v	class:GitConnectionFeatures
cecil	gitly.py	/^    cecil = pygit2.Signature('Cecil Committer', 'cecil@committers.tld')$/;"	v	class:Branch
check_expression_support	base.py	/^    def check_expression_support(self, thingy):$/;"	m	class:GitConnectionOpts
check_field	base.py	/^    def check_field(self, field, from_model=None):$/;"	m	class:GitValidation
close	base.py	/^    def close(self):$/;"	m	class:GitConnection
close	cursor.py	/^    def close(self):$/;"	m	class:GitCursor
commit	base.py	/^    def commit(self):$/;"	m	class:GitConnection
commit	gitly.py	/^    def commit(self, msg, author=alice, committer=cecil):$/;"	m	class:Branch
compiler	base.py	/^    def compiler(self, suggestion):$/;"	m	class:GitConnectionOpts
create_cursor	base.py	/^    def create_cursor(self):$/;"	m	class:DatabaseWrapper
create_model	base.py	/^    def create_model(self, model):$/;"	m	class:GitSchemaEditor
creation	base.py	/^    def creation(self):$/;"	m	class:DatabaseWrapper
deserialize_db_from_string	creation.py	/^    deserialize_db_from_string = NotImplemented$/;"	v	class:GitDatabaseCreation
destroy_test_db	creation.py	/^    destroy_test_db = NotImplemented$/;"	v	class:GitDatabaseCreation
dict_diff	gitly.py	/^def dict_diff(dict1, dict2):$/;"	f
discover	gitly.py	/^    def discover(cls):$/;"	m	class:Branch
discover_head	gitly.py	/^def discover_head():$/;"	f
dive	runners.py	/^    def dive(self, branch, row, joins):$/;"	m	class:SelectRunner
empty_tree	gitly.py	/^def empty_tree(repo):$/;"	f
execute	cursor.py	/^    def execute(self, f):$/;"	m	class:GitCursor
execute_sql	compilers.py	/^    def execute_sql(self, result_type=MULTI):$/;"	m	class:GitQueryCompiler
execute_sql	compilers.py	/^    def execute_sql(self, return_id):$/;"	m	class:GitInsertCompiler
execute_sql	compilers.py	/^    def execute_sql(self, return_type=MULTI):$/;"	m	class:GitUpdateCompiler
fetch_iter	cursor.py	/^    def fetch_iter(self):$/;"	m	class:GitCursor
fetchone	cursor.py	/^    def fetchone(self):$/;"	m	class:GitCursor
flatten_tree	gitly.py	/^def flatten_tree(tree, prefix=()):$/;"	f
get	gitly.py	/^    def get(self, path, default=Tree._ERROR):$/;"	m	class:Branch
get	gitly.py	/^    def get(self, path, default=_ERROR):$/;"	m	class:Tree
get_connection_params	base.py	/^    def get_connection_params(self):$/;"	m	class:DatabaseWrapper
get_db_converters	base.py	/^    def get_db_converters(self, wat):$/;"	m	class:GitConnectionOpts
get_new_connection	base.py	/^    def get_new_connection(self, params):$/;"	m	class:DatabaseWrapper
get_objects	creation.py	/^    get_objects = NotImplemented$/;"	v	class:GitDatabaseCreation
get_selector	selectors.py	/^def get_selector(col, _, __):$/;"	f
has_results	compilers.py	/^    def has_results(self):$/;"	m	class:SQLCompiler
init_connection_state	base.py	/^    def init_connection_state(self):$/;"	m	class:DatabaseWrapper
insert_id	cursor.py	/^    def insert_id(self):$/;"	m	class:GitCursor
interprets_empty_strings_as_nulls	base.py	/^    interprets_empty_strings_as_nulls = False$/;"	v	class:GitConnectionFeatures
iter_table	runners.py	/^    def iter_table(self, branch, parent_row, join):$/;"	m	class:SelectRunner
keys	gitly.py	/^    def keys(self):$/;"	m	class:Tree
load_object	runners.py	/^    def load_object(self, data):$/;"	m	class:GitQueryRunner
log	gitly.py	/^    def log(self):$/;"	m	class:Commit
max_name_length	base.py	/^    def max_name_length(self):$/;"	m	class:GitConnectionOpts
nodup	runners.py	/^def nodup(seq):$/;"	f
project_opened	.ropeproject/config.py	/^def project_opened(project):$/;"	f
qualify	runners.py	/^    def qualify(self, cond, obj):$/;"	m	class:GitQueryRunner
queries_logged	base.py	/^    def queries_logged(self):$/;"	m	class:DatabaseWrapper
quote_name	base.py	/^    def quote_name(self, name):$/;"	m	class:GitConnectionOpts
remove_field	base.py	/^    def remove_field(self, from_model, field):$/;"	m	class:GitSchemaEditor
results_iter	compilers.py	/^    def results_iter(self, results=None):$/;"	m	class:GitQueryCompiler
rowcount	cursor.py	/^    def rowcount(self):$/;"	m	class:GitCursor
run	runners.py	/^    def run(self, branch):$/;"	m	class:DeleteRunner
run	runners.py	/^    def run(self, branch):$/;"	m	class:InsertRunner
run	runners.py	/^    def run(self, branch):$/;"	m	class:SelectRunner
run	runners.py	/^    def run(self, branch):$/;"	m	class:UpdateRunner
savepoint	base.py	/^    def savepoint(self):$/;"	m	class:DatabaseWrapper
schema_editor	base.py	/^    def schema_editor(self):$/;"	m	class:DatabaseWrapper
selectors	selectors.py	/^selectors = {$/;"	v
serialize_db_to_string	creation.py	/^    serialize_db_to_string = NotImplemented$/;"	v	class:GitDatabaseCreation
set	gitly.py	/^    def set(self, path, data):$/;"	m	class:Tree
set_prefs	.ropeproject/config.py	/^def set_prefs(prefs):$/;"	f
setup_runner	runners.py	/^    def setup_runner(self):$/;"	m	class:GitQueryRunner
sql_create_model	creation.py	/^    sql_create_model = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_destroy_indexes_for_field	creation.py	/^    sql_destroy_indexes_for_field = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_destroy_indexes_for_fields	creation.py	/^    sql_destroy_indexes_for_fields = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_destroy_indexes_for_model	creation.py	/^    sql_destroy_indexes_for_model = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_destroy_model	creation.py	/^    sql_destroy_model = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_for_inline_foreign_key_references	creation.py	/^    sql_for_inline_foreign_key_references = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_for_pending_references	creation.py	/^    sql_for_pending_references = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_indexes_for_field	creation.py	/^    sql_indexes_for_field = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_indexes_for_fields	creation.py	/^    sql_indexes_for_fields = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_indexes_for_model	creation.py	/^    sql_indexes_for_model = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_remove_table_constraints	creation.py	/^    sql_remove_table_constraints = NotImplemented$/;"	v	class:GitDatabaseCreation
sql_table_creation_suffix	creation.py	/^    sql_table_creation_suffix = NotImplemented$/;"	v	class:GitDatabaseCreation
subtree	gitly.py	/^    def subtree(self, path):$/;"	m	class:Tree
subtree_or_empty	gitly.py	/^    def subtree_or_empty(self, path):$/;"	m	class:Tree
table_names	introspection.py	/^    def table_names(self, cursor):$/;"	m	class:GitIntrospection
test_db_signature	creation.py	/^    def test_db_signature(self):$/;"	m	class:GitDatabaseCreation
tree	gitly.py	/^    def tree(self):$/;"	m	class:Commit
tree_changes	gitly.py	/^def tree_changes(tree1, tree2):$/;"	f
truncates_names	base.py	/^    truncates_names = False$/;"	v	class:GitConnectionFeatures
update_indexes	runners.py	/^    def update_indexes(self, branch, record, data):$/;"	m	class:InsertRunner
values	gitly.py	/^    def values(self):$/;"	m	class:Tree
vendor	base.py	/^    vendor = 'git'$/;"	v	class:DatabaseWrapper
wrap_database_errors	base.py	/^    def wrap_database_errors(self):$/;"	m	class:DatabaseWrapper
yield_rows	selectors.py	/^def yield_rows(cols, objs):$/;"	f
